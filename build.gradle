plugins {
    id 'idea'
    id 'java'
    id 'com.diffplug.spotless' version '5.4.0'
    id 'com.github.spotbugs' version '4.5.0' apply false
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
}
apply from: "${scriptDir}/spotless.gradle"
//apply from: "${scriptDir}/jacoco.gradle"

allprojects {
    apply plugin :'java'
    group = "com.logicmonitor"
    version = "0.1.0-alpha"

    apply from: "${rootProject.projectDir}/gradle/spotbugs.gradle"
}
ext {
    versions = [
            opentelemetry     : "1.6.0",
            opentelemetryAlpha: "1.6.0-alpha",

    ]
}
//build.dependsOn spotlessApply
repositories {
    mavenCentral()
}


dependencies {

    api project(':otel-resource')
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    api group: "io.opentelemetry", name: "opentelemetry-sdk", version: "${versions.opentelemetry}"
    implementation group: "io.opentelemetry", name: "opentelemetry-api", version: "${versions.opentelemetry}"
    api group: "io.opentelemetry", name: "opentelemetry-sdk-extension-autoconfigure", version: "${versions.opentelemetryAlpha}"
}
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'lm-opentelemetry-sdk'
            from components.java
        }
    }
}

test {
    useJUnitPlatform()
}


task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    allprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    allprojects*.test

}
